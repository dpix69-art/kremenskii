name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]   # поменяй, если основная ветка другая
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            package-lock.json
            client/package-lock.json

      - name: Detect package location
        id: where
        run: |
          if [ -f "client/package.json" ]; then
            echo "pkgdir=client" >> $GITHUB_OUTPUT
          elif [ -f "package.json" ]; then
            echo "pkgdir=." >> $GITHUB_OUTPUT
          else
            echo "❌ package.json not found"; exit 1
          fi

      # ⚠️ Если lock рассинхронен, npm ci падает. Делаем fallback на npm install.
      - name: Install dependencies (ci → install fallback)
        working-directory: ${{ steps.where.outputs.pkgdir }}
        run: |
          set -e
          if [ -f package-lock.json ]; then
            echo "Trying npm ci…"
            npm ci || (echo "npm ci failed — using npm install" && npm install --no-audit --no-fund)
          else
            echo "No lockfile — using npm install"
            npm install --no-audit --no-fund
          fi

      - name: Build
        working-directory: ${{ steps.where.outputs.pkgdir }}
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: npm run build

      - name: Locate dist
        id: dist
        run: |
          if [ -d "client/dist" ]; then
            echo "outdir=client/dist" >> $GITHUB_OUTPUT
          elif [ -d "dist" ]; then
            echo "outdir=dist" >> $GITHUB_OUTPUT
          else
            echo "❌ dist not found"; ls -la; exit 1
          fi

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ steps.dist.outputs.outdir }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
